plugins {
    id 'java-library'
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // Replace values in only mcmod.info.
    filesMatching(['mcmod.info', "META-INF/mods.toml"]) {
        // Replace version
        expand 'version':project.version
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6
}

subprojects {
    apply plugin: "java"

    version = rootProject.version
    group = rootProject.group

    dependencies {
        implementation(rootProject.sourceSets.main.output)
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // This task creates a .jar file containing the source code of this mod.
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    // This task creates a .jar file containing a deobfuscated version of this mod, 
    // for other developers to use in a development environment.
    task devJar(type: Jar) {
        archiveClassifier.set("dev")
        from sourceSets.main.output
    }

    // Creates the listed artifacts on building the mod.
    artifacts {
        archives sourcesJar
        archives devJar
    }

    // the task to specify generating jar is finished
    task finishCreateJar
}

private static String toCamelCase(String... parts) {
    def builder = new StringBuilder()
    boolean first = true
    for (String part in parts) {
        if (part.isEmpty()) continue
        if (first) {
            builder.append(part.charAt(0).toLowerCase())
            first = false
        } else {
            builder.append(part.charAt(0).toUpperCase())
        }
        builder.append(part.substring(1))
    }
    return builder.toString()
}

// then create fat jar now!
def configureJar(Jar task, List<Project> projects, String dependsOn, String archiveFileFrom = dependsOn) {
    projects.each {
        task.dependsOn(it.tasks.getByName(dependsOn))
        task.from (zipTree(((Jar) it.tasks.getByName(archiveFileFrom)).archiveFile)) {
            exclude "META-INF", "META-INF/**"
        }
    }
    task.duplicatesStrategy = DuplicatesStrategy.FAIL
}

def configureTarget(String prefix, Project... projects) {
    Jar sourcesJar = (Jar) tasks.create(name: toCamelCase(prefix, "sourcesJar"), type: Jar) {
        archiveClassifier.set("sources")
        archiveAppendix.set(prefix)
        from sourceSets.main.allSource
    }

    Jar devJar = (Jar) tasks.create(name: toCamelCase(prefix, "devJar"), type: Jar, dependsOn: classes) {
        archiveClassifier.set("dev")
        archiveAppendix.set(prefix)
        from sourceSets.main.output
    }

    Jar jar
    if (prefix != "") {
        jar = (Jar)tasks.create(name: toCamelCase(prefix, "jar"), type: Jar, dependsOn: classes) {
            archiveAppendix.set(prefix)
            from sourceSets.main.output
        }
    } else {
        jar = (Jar)tasks.getByName("jar")
    }

    artifacts {
        archives sourcesJar
        archives devJar
        archives jar
    }

    def projectList = projects.toList()
    configureJar(sourcesJar, projectList, "sourcesJar")
    configureJar(devJar, projectList, "devJar")
    configureJar(jar, projectList, "finishCreateJar", "jar")
}

configureTarget("", project("1710"), project("1122"))
configureTarget("post1.13", project("1132"))
